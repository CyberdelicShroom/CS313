
import java.io.BufferedInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JFileChooser;

/**
 *
 * @author Keagan
 */
public class TCPSenderWindow extends javax.swing.JFrame {

    File file = null;
    String fileName;
    static Socket socket = null;
    static OutputStream os = null;
    static DataOutputStream dos = null;
    /**
     * Creates new form TCPSenderWindow
     */
    public TCPSenderWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        chooseFileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("TCP Sender");

        chooseFileButton.setText("Select File");
        chooseFileButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chooseFileButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(180, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(179, 179, 179))
            .addGroup(layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(chooseFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(55, 55, 55)
                .addComponent(chooseFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(90, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseFileButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooseFileButtonMouseClicked
        JFileChooser jfc = new JFileChooser(); // File browser to choose file
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY); // Only files can be chosen (not directories)
        if (jfc.isMultiSelectionEnabled()) { // Only one file at a time (no multiple selection)
            jfc.setMultiSelectionEnabled(false);
        }

        int r = jfc.showOpenDialog(null);
        
        System.out.println("Ready to send file once file has been selected.");
        if (r == JFileChooser.APPROVE_OPTION) {
            try {
                file = jfc.getSelectedFile();
                fileName = file.getName();
                dos.writeUTF(fileName);
                FileInputStream fis = new FileInputStream(file);
                BufferedInputStream bis = new BufferedInputStream(fis);
                byte[] contents;         
                long fileLength = file.length();
                dos.writeLong(fileLength);
                long current = 0;                       
                long start = System.nanoTime();
                while(current!=fileLength){      
                    int size = 10000;
                    if(fileLength - current >= size) {              
                        current += size;                 
                    } else {                  
                        size = (int)(fileLength - current);
                        current = fileLength;
                    }                  
                    contents = new byte[size];              
                    bis.read(contents, 0, size);               
                    os.write(contents);       
                    System.out.println("Sending file ... "+(current*100)/fileLength+"% complete!");           
                }
                os.flush();         
//                    socket.close();          
//                    ssock.close();        
                System.out.println("File sent succesfully!");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_chooseFileButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TCPSenderWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TCPSenderWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TCPSenderWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TCPSenderWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TCPSenderWindow().setVisible(true);
            }
        });
        try {
            ServerSocket ssock = new ServerSocket(5000);
            socket = ssock.accept();
            System.out.println("Connected client");
            os = socket.getOutputStream();
            dos = new DataOutputStream(os);
        } catch (IOException e) {
            e.printStackTrace();
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseFileButton;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
